<!-- livebook:{"persist_outputs":true} -->

# Advent Of Code 21

## Day 3

In one day, you can get 2 stars by  solving 2 puzzle.

Index

* [Puzzle 1](#binary-diagnostic-(puzzle-1/2))
* [Puzzle 2](#binary-diagnostic-(puzzle-2/2))

```elixir
input_puzzle_path = "<insert_path>/Elixir-Advent-of-Code/Puzzles/Day3/input.txt"
```

<!-- livebook:{"output":true} -->

```
"<insert_path>/Elixir-Advent-of-Code/Puzzles/Day3/input.txt"
```

## Binary Diagnostic (Puzzle 1/2)

The submarine has been making some odd creaking noises, so you ask it to produce a diagnostic report just in case.

The diagnostic report (your puzzle input) consists of a **list of binary numbers** which, when **decoded properly, can tell you many useful things about the conditions of the submarine**. We need to check the **power consumption**.

```
          .-""""-.
          |==  ==|-.
          |~~ ~~~|`\\
          |LILILI| ||    
          |      |//
          |      |/
   jps    |      |
        __|______|__
       [____________]
```

You need to **use the binary numbers** in the diagnostic report **generate two new binary numbers** (called the **gamma rate** and the **epsilon rate**). The **power consumption** can then be found by **multiplying the gamma rate by the epsilon rate**.

#### Gamma rate

Each bit in the **gamma rate** can be determined by **finding the most common bit in the corresponding position** of all numbers in the diagnostic report.

For example, given the following diagnostic report:

```
00100
11110
10110
10111
10101
01111
00111
11100
10000
11001
00010
01010
```

Considering only the first bit of each number, there are `5 => 0 bits` and `7 => 1 bits`. So the most common bit is 1, and the **first bit of the gamma rate is 1**.

The most **common second bit** of the numbers in the diagnostic report is **0**.

The most common value of the third, fourth, and fifth bits are **1, 1, and 0**.

So, the gamma rate is the binary number `10110`, or `22` in decimal.

#### Epsilon rate

The epsilon rate is calculated in a similar way; rather than use the most common bit, **the least common bit** from each position is used. So, the epsilon rate is `01001`, or `9` in decimal.

<!-- livebook:{"break_markdown":true} -->

#### Question ...

Use the binary numbers in your diagnostic report to calculate the gamma rate and epsilon rate, convert to decimal system and then multiply them together. **What is the power consumption of the submarine?**

```elixir
# Read the input file and split the bits
diagnostic_report =
  File.read!(input_puzzle_path)
  |> String.split("\n", trim: true)
  |> Enum.map(fn x -> String.graphemes(x) end)
```

<!-- livebook:{"output":true} -->

```
[
  ["0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "1", "1"],
  ["0", "0", "1", "0", "1", "0", "0", "0", "0", "1", "1", "1"],
  ["0", "1", "1", "0", "1", "0", "0", "0", "0", "0", "1", "0"],
  ["0", "0", "0", "0", "1", "1", "1", "1", "1", "1", "1", "0"],
  ["1", "0", "1", "1", "0", "1", "0", "0", "0", "1", "0", "1"],
  ["0", "0", "0", "1", "0", "0", "0", "1", "0", "1", "0", "0"],
  ["1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0"],
  ["1", "1", "1", "1", "1", "1", "0", "0", "0", "0", "1", "0"],
  ["0", "0", "0", "0", "1", "1", "0", "1", "0", "0", "1", "1"],
  ["1", "0", "0", "0", "1", "1", "1", "0", "0", "0", "0", "0"],
  ["1", "0", "1", "1", "1", "0", "1", "1", "0", "0", "0", "1"],
  ["1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1"],
  ["1", "1", "1", "0", "1", "1", "0", "1", "1", "0", "0", "1"],
  ["0", "1", "0", "1", "0", "1", "0", "0", "0", "0", "1", "0"],
  ["0", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", "0"],
  ["1", "0", "1", "0", "1", "0", "0", "1", "1", "1", "1", "1"],
  ["0", "1", "0", "0", "0", "0", "1", "1", "1", "1", "0", "1"],
  ["0", "1", "1", "0", "1", "0", "1", "1", "1", "1", "0", "0"],
  ["1", "0", "1", "1", "1", "1", "0", "1", "0", "1", "1", "0"],
  ["0", "0", "0", "1", "1", "0", "1", "1", "0", "1", "0", "1"],
  ["0", "0", "1", "0", "1", "0", "0", "0", "0", "0", "0", "1"],
  ["1", "1", "0", "1", "0", "1", "1", "0", "0", "1", "1", "0"],
  ["1", "1", "1", "1", "1", "0", "0", "1", "0", "1", "0", "0"],
  ["0", "0", "1", "0", "0", "0", "0", "0", "1", "0", "1", "1"],
  ["1", "0", "0", "1", "1", "1", "1", "0", "1", "0", "0", "1"],
  ["0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "1"],
  ["1", "0", "0", "1", "0", "0", "1", "0", "1", "0", "1", "0"],
  ["0", "1", "1", "0", "1", "0", "1", "1", "0", "1", "1", "1"],
  ["0", "0", "0", "0", "0", "1", "1", "0", "0", "1", "0", "0"],
  ["1", "0", "1", "1", "1", "1", "0", "0", "0", "1", "1", "1"],
  ["0", "1", "0", "1", "0", "1", "1", "0", "1", "1", "0", "0"],
  ["0", "0", "1", "1", "1", "1", "0", "1", "0", "0", "1", "0"],
  ["0", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0"],
  ["1", "1", "0", "1", "0", "1", "0", "1", "1", "0", "1", "1"],
  ["0", "0", "0", "0", "1", "0", "1", "0", "1", "0", "0", "0"],
  ["0", "1", "1", "0", "1", "1", "1", "0", "1", "1", "0", "1"],
  ["1", "0", "1", "0", "0", "1", "0", "0", "0", "0", "1", "1"],
  ["1", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0"],
  ["0", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", ...],
  ["0", "0", "1", "1", "0", "1", "1", "1", "0", "1", ...],
  ["1", "1", "0", "1", "1", "0", "1", "1", "0", ...],
  ["1", "0", "0", "0", "1", "1", "0", "0", ...],
  ["0", "1", "0", "1", "1", "0", "1", ...],
  ["0", "0", "1", "0", "1", "0", ...],
  ["1", "1", "0", "1", "1", ...],
  ["0", "0", "1", "0", ...],
  ["1", "0", "0", ...],
  ["1", "0", ...],
  ["0", ...],
  [...],
  ...
]
```

```elixir
defmodule Aux do
  def most_frequent(%{"0" => n_zeros, "1" => n_ones}),
    do: if(n_zeros <= n_ones, do: "1", else: "0")

  def most_frequent(%{"0" => _}), do: "0"
  def most_frequent(%{"1" => _}), do: "1"

  def less_frequent(%{"0" => n_zeros, "1" => n_ones}),
    do: if(n_ones >= n_zeros, do: "0", else: "1")

  def less_frequent(%{"0" => _}), do: "1"
  def less_frequent(%{"1" => _}), do: "0"

  def most_common_bit(list) do
    list
    |> Enum.frequencies()
    |> most_frequent()
  end

  def least_common_bit(list) do
    list
    |> Enum.frequencies()
    |> less_frequent()
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Aux, <<70, 79, 82, 49, 0, 0, 9, ...>>, {:least_common_bit, 1}}
```

```elixir
defmodule DiagnosticConsumptionPower do
  require Aux

  # Calculate GAMMA RATE
  def calculate_gamma_rate(diagnostic_report) do
    # Transpose
    list_of_columns = diagnostic_report |> Enum.zip() |> Enum.map(&Tuple.to_list(&1))
    calculate_gamma_rate(list_of_columns, "")
  end

  def calculate_gamma_rate([h | t], acc) do
    calculate_gamma_rate(t, acc <> Aux.most_common_bit(h))
  end

  def calculate_gamma_rate(_, acc) do
    acc
  end

  # Calculate EPSILON RATE
  def calculate_epsilon_rate(gamma_rate) do
    list_of_graphemes =
      Enum.map(
        String.graphemes(gamma_rate),
        fn x ->
          case x do
            "0" -> "1"
            "1" -> "0"
          end
        end
      )

    Enum.join(list_of_graphemes)
  end
end

gamma_rate =
  DiagnosticConsumptionPower.calculate_gamma_rate(diagnostic_report)
  |> IO.inspect(label: "Gamma rate")

epsilon_rate =
  DiagnosticConsumptionPower.calculate_epsilon_rate(gamma_rate)
  |> IO.inspect(label: "Epsilon rate")
```

<!-- livebook:{"output":true} -->

```
Gamma rate: "101111001110"
Epsilon rate: "010000110001"
```

<!-- livebook:{"output":true} -->

```
"010000110001"
```

```elixir
# To decimal system:
{gamma_decimal_value, _} = Integer.parse(gamma_rate, 2)
{epsilon_decimal_value, _} = Integer.parse(epsilon_rate, 2)

{gamma_decimal_value, epsilon_decimal_value}
```

<!-- livebook:{"output":true} -->

```
{3022, 1073}
```

```elixir
epsilon_decimal_value * gamma_decimal_value
```

<!-- livebook:{"output":true} -->

```
3242606
```

## Binary Diagnostic (Puzzle 2/2)

Next, you should verify the **life support rating**, which can be determined by multiplying the **oxygen generator rating** by the **CO2** scrubber rating. Both ratings are values that can be found in your diagnostic report - finding them is the tricky part.

```
       ___
       )_(             _
       | |            [_ ]
     .-'-'-.        .-'. '-.
    /-::_..-\      /:;/ _.-'\
    )_     _(      |:._   .-|
    |;::    |      |:._     |
    |;:: O2 |      |:._ CO2 |
    |;:: Gen|      |Scrubber|
    |;::-.._|      |:._     |
    `-.._..-'      `-.____.-'    cjr

  --------------------------------------
 /                                       \
|               80  90  100               |
|            70     ^      120            |        Jon McGorrill
|        60 *      /|\       * 140        |
|    55             |              160    |
|                   |                     |
|                   |                     |
|   (O)            (+)              (O)   |
 \______________________________________
   
```

<!-- livebook:{"break_markdown":true} -->

Both values are located using a similar process that involves **filtering out values until only one remains**. Consider just the first bit of those numbers:

* **Keep only numbers selected by the bit criteria** for which you are searching.
* **Discard numbers which do not match the bit criteria**.
* If you **only have one number left**, **stop**; this is the rating value for which you are searching.
* **Otherwise, repeat the process**, considering the next bit to the right.

<!-- livebook:{"break_markdown":true} -->

### Oxygen generator rating

Determine the **most common value (0 or 1) in the current bit position**, and **keep only numbers with that bit in that position**. If 0 frequency = 1 frequency => Keep values with a 1 in the position being considered.

<!-- livebook:{"break_markdown":true} -->

### CO2 scrubber rating

Determine the **least common value (0 or 1)** in the current bit position, and **keep only numbers** with that bit in that position. If 0 frequency = 1 frequency => Keep values with a 0 in the position being considered.

<!-- livebook:{"break_markdown":true} -->

### Example

```
00100 X
11110
10110 
10111
10101
01111 X
00111 X
11100
10000
11001
00010 X
01010 X
```

Start with all 12 numbers (lines) and consider only the first bit of each number (first column). There are more 1 bits (7) than 0 bits (5), so keep only the 7 numbers with a 1 in the first position: `11110, 10110, 10111, 10101, 11100, 10000, and 11001`.

```
11110 X
10110
10111
10101
11100 X
10000
11001 X
```

Then, consider the second bit of the 7 remaining numbers: there are more 0 bits (4) than 1 bits (3), so keep only the 4 numbers with a 0 in the second position: `10110, 10111, 10101, and 10000`.

```
10110 
10111
10101
10000 X
```

In the third position, three of the four numbers have a 1, so keep those three: `10110, 10111, and 10101`.

```
10110
10111
10101 X
```

In the fourth position, two of the three numbers have a 1, so keep those two: `10110 and 10111`.

```
10110 X
10111 
```

In the fifth position, there are an equal number of 0 bits and 1 bits (one each). So, to find the oxygen generator rating, keep the number with a 1 in that position: **10111**.

**As there is only one number left, stop; the oxygen generator rating is 10111, or 23 in decimal.**

<!-- livebook:{"break_markdown":true} -->

### Question...

Use the binary numbers in your diagnostic report to calculate the oxygen generator rating and CO2 scrubber rating, then **multiply them (using decimal base)** together. **What is the life support rating of the submarine?**

```elixir
# Read the input file and split the bits
diagnostic_report =
  File.read!(input_puzzle_path)
  |> String.split("\n", trim: true)
  |> Enum.map(fn x -> String.graphemes(x) end)
```

<!-- livebook:{"output":true} -->

```
[
  ["0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "1", "1"],
  ["0", "0", "1", "0", "1", "0", "0", "0", "0", "1", "1", "1"],
  ["0", "1", "1", "0", "1", "0", "0", "0", "0", "0", "1", "0"],
  ["0", "0", "0", "0", "1", "1", "1", "1", "1", "1", "1", "0"],
  ["1", "0", "1", "1", "0", "1", "0", "0", "0", "1", "0", "1"],
  ["0", "0", "0", "1", "0", "0", "0", "1", "0", "1", "0", "0"],
  ["1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0"],
  ["1", "1", "1", "1", "1", "1", "0", "0", "0", "0", "1", "0"],
  ["0", "0", "0", "0", "1", "1", "0", "1", "0", "0", "1", "1"],
  ["1", "0", "0", "0", "1", "1", "1", "0", "0", "0", "0", "0"],
  ["1", "0", "1", "1", "1", "0", "1", "1", "0", "0", "0", "1"],
  ["1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1"],
  ["1", "1", "1", "0", "1", "1", "0", "1", "1", "0", "0", "1"],
  ["0", "1", "0", "1", "0", "1", "0", "0", "0", "0", "1", "0"],
  ["0", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", "0"],
  ["1", "0", "1", "0", "1", "0", "0", "1", "1", "1", "1", "1"],
  ["0", "1", "0", "0", "0", "0", "1", "1", "1", "1", "0", "1"],
  ["0", "1", "1", "0", "1", "0", "1", "1", "1", "1", "0", "0"],
  ["1", "0", "1", "1", "1", "1", "0", "1", "0", "1", "1", "0"],
  ["0", "0", "0", "1", "1", "0", "1", "1", "0", "1", "0", "1"],
  ["0", "0", "1", "0", "1", "0", "0", "0", "0", "0", "0", "1"],
  ["1", "1", "0", "1", "0", "1", "1", "0", "0", "1", "1", "0"],
  ["1", "1", "1", "1", "1", "0", "0", "1", "0", "1", "0", "0"],
  ["0", "0", "1", "0", "0", "0", "0", "0", "1", "0", "1", "1"],
  ["1", "0", "0", "1", "1", "1", "1", "0", "1", "0", "0", "1"],
  ["0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "1"],
  ["1", "0", "0", "1", "0", "0", "1", "0", "1", "0", "1", "0"],
  ["0", "1", "1", "0", "1", "0", "1", "1", "0", "1", "1", "1"],
  ["0", "0", "0", "0", "0", "1", "1", "0", "0", "1", "0", "0"],
  ["1", "0", "1", "1", "1", "1", "0", "0", "0", "1", "1", "1"],
  ["0", "1", "0", "1", "0", "1", "1", "0", "1", "1", "0", "0"],
  ["0", "0", "1", "1", "1", "1", "0", "1", "0", "0", "1", "0"],
  ["0", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0"],
  ["1", "1", "0", "1", "0", "1", "0", "1", "1", "0", "1", "1"],
  ["0", "0", "0", "0", "1", "0", "1", "0", "1", "0", "0", "0"],
  ["0", "1", "1", "0", "1", "1", "1", "0", "1", "1", "0", "1"],
  ["1", "0", "1", "0", "0", "1", "0", "0", "0", "0", "1", "1"],
  ["1", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0"],
  ["0", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", ...],
  ["0", "0", "1", "1", "0", "1", "1", "1", "0", "1", ...],
  ["1", "1", "0", "1", "1", "0", "1", "1", "0", ...],
  ["1", "0", "0", "0", "1", "1", "0", "0", ...],
  ["0", "1", "0", "1", "1", "0", "1", ...],
  ["0", "0", "1", "0", "1", "0", ...],
  ["1", "1", "0", "1", "1", ...],
  ["0", "0", "1", "0", ...],
  ["1", "0", "0", ...],
  ["1", "0", ...],
  ["0", ...],
  [...],
  ...
]
```

```elixir
defmodule DiagnosticC02andO2 do
  require Aux

  def most_common_bit_of_a_column(diagnostic_report, pos) do
    diagnostic_report
    |> Enum.map(fn x -> Enum.at(x, pos) end)
    |> Aux.most_common_bit()
  end

  def least_common_bit_of_a_column(diagnostic_report, pos) do
    diagnostic_report
    |> Enum.map(fn x -> Enum.at(x, pos) end)
    |> Aux.least_common_bit()
  end

  def calculate_rating(diagnostic_report, criteria) do
    calculate_rating(diagnostic_report, 0, criteria)
  end

  def apply_a_criteria(atom, list, pos) do
    case atom do
      :o2generator -> most_common_bit_of_a_column(list, pos)
      :co2strugger -> least_common_bit_of_a_column(list, pos)
      _ -> raise("Criteria not defined")
    end
  end

  def calculate_rating(diagnostic_report, pos, criteria) do
    case diagnostic_report do
      [h | []] ->
        Enum.join([h])

      [h | t] ->
        calculate_rating(
          Enum.filter(
            [h | t],
            fn x ->
              Enum.at(x, pos) == apply_a_criteria(criteria, [h | t], pos)
            end
          ),
          pos + 1,
          criteria
        )

      # Error case
      _ ->
        diagnostic_report
    end
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, DiagnosticC02andO2, <<70, 79, 82, 49, 0, 0, 14, ...>>, {:calculate_rating, 3}}
```

```elixir
{rate_O2, _} =
  DiagnosticC02andO2.calculate_rating(diagnostic_report, :o2generator)
  |> IO.inspect()
  |> Integer.parse(2)

{rate_CO2, _} =
  DiagnosticC02andO2.calculate_rating(diagnostic_report, :co2strugger)
  |> IO.inspect()
  |> Integer.parse(2)

rate_CO2 * rate_O2
```

<!-- livebook:{"output":true} -->

```
"101110111101"
"011001010000"
```

<!-- livebook:{"output":true} -->

```
4856080
```

| Previous                     | Next                         |
| ---------------------------- | ---------------------------: |
| [Day 2](../Day2/Day2.livemd) | [Day 4](../Day4/Day4.livemd) |

|[Return to puzzles index](../../AdventOfCode.livemd)
