<!-- livebook:{"persist_outputs":true} -->

# Advent Of Code 21

## Day 5

In one day, you can get 2 stars by  solving 2 puzzle.

Index

* [Puzzle 1](#hydrothermal-venture-(puzzle-1/2))
* [Puzzle 2](#hydrothermal-venture-(puzzle-2/2))

```elixir
input_puzzle_path = "./Projects/Elixir-Advent-of-Code/Puzzles/Day5/input.txt"
```

<!-- livebook:{"output":true} -->

```
"./Projects/Elixir-Advent-of-Code/Puzzles/Day5/input.txt"
```

## Hydrothermal Venture (Puzzle 1/2)

You come across a field of hydrothermal vents on the ocean floor! These vents constantly produce large, opaque clouds, so it would be best to avoid them if possible.

```
Y
|,--.
|    )
|  _'-. 
| (    ) ),
|____________)
|                                       ___
|                                      /   |  
|  ...           _           ,--------'    '--------..._,.
| (___)        (...)        (                          _--+    
|                -            `----------------------''' `'
|
|                 (---) 
|             ___       ___
y2     _____/    UUUUUUU   \____
|     /          UUUUUUU         \________
y1               UUUUUUU
|    
--------------x2---x1-------------------- X
                   

Ex: x1,y1 -> x2,y2

```

They tend to form in lines; the submarine helpfully produces a list of nearby lines of vents (your puzzle input) for you to review. For example:

```
0,9 -> 5,9
8,0 -> 0,8
9,4 -> 3,4
2,2 -> 2,1
7,0 -> 7,4
6,4 -> 2,0
0,9 -> 2,9
3,4 -> 1,4
0,0 -> 8,8
5,5 -> 8,2
```

Each line is a segment in the format `x1,y1 -> x2,y2` where `(x1,y1)` are the coordinates of one end the line segment and `(x2,y2)` are the coordinates of the other end.  In other words:

* An entry like `1,1 -> 1,3` covers points `1,1`, `1,2`, and `1,3`.
* An entry like `9,7 -> 7,7` covers points `9,7`, `8,7`, and `7,7`.

For now, only consider horizontal and vertical lines: lines where either `x1 = x2` or `y1 = y2`.

<!-- livebook:{"break_markdown":true} -->

So, the horizontal and vertical lines from the above list would produce the following diagram:

```
.......1..
..1....1..
..1....1..
.......1..
.112111211
..........
..........
..........
..........
222111....
```

In this diagram, the top left corner is `0,0` and the bottom right corner is `9,9`. Example of 2 segment:

* The top-left pair of 1s, for example, comes from `2,2 -> 2,1`.
* The very bottom row is formed by the overlapping lines `0,9 -> 5,9` and `0,9 -> 2,9`.

To avoid the most dangerous areas, you need to determine **the number of points where at least two lines overlap**. In the above example, **this is anywhere in the diagram with a `2` or larger - a total of `5` points**.

**Consider only horizontal and vertical lines. At how many points do at least two lines overlap?**

```elixir
{:ok, file} = File.open(input_puzzle_path, [:read, :compressed])

input = IO.read(file, :eof)
```

<!-- livebook:{"output":true} -->

```
"284,294 -> 733,743\n625,347 -> 653,375\n561,848 -> 561,181\n836,102 -> 836,339\n946,941 -> 22,17\n18,954 -> 956,16\n370,142 -> 370,700\n990,966 -> 677,966\n366,603 -> 366,465\n728,942 -> 57,271\n615,493 -> 847,493\n584,281 -> 301,281\n125,356 -> 301,180\n941,569 -> 555,183\n151,116 -> 509,116\n41,18 -> 841,818\n627,670 -> 627,630\n965,472 -> 965,100\n93,404 -> 330,641\n475,963 -> 475,514\n389,389 -> 389,326\n842,565 -> 842,576\n454,700 -> 650,700\n73,810 -> 73,319\n450,212 -> 450,284\n316,392 -> 316,697\n915,592 -> 578,592\n622,485 -> 434,485\n109,853 -> 952,10\n305,73 -> 305,222\n27,489 -> 157,489\n191,979 -> 867,979\n527,329 -> 527,292\n301,645 -> 301,162\n639,730 -> 176,730\n46,964 -> 46,458\n727,422 -> 435,714\n28,552 -> 404,552\n33,108 -> 33,21\n227,249 -> 327,249\n414,903 -> 784,903\n69,422 -> 888,422\n422,924 -> 103,605\n793,353 -> 450,10\n714,682 -> 714,972\n201,745 -> 410,745\n408,713 -> 408,847\n174,842 -> 818,198\n863,353 -> 775,353\n199,780 -> 670,780\n877,947 -> 340,410\n163,202 -> 163,91\n955,919 -> 955,585\n836,271 -> 533,271\n258,366 -> 728,836\n582,749 -> 582,12\n80,40 -> 80,704\n287,213 -> 287,635\n390,546 -> 390,194\n837,511 -> 538,810\n473,281 -> 902,281\n851,865 -> 731,745\n918,59 -> 445,532\n796,215 -> 796,248\n875,111 -> 604,111\n660,805 -> 538,805\n507,850 -> 145,850\n585,861 -> 585,52\n426,74 -> 700,348\n206,405 -> 529,405\n418,333 -> 418,17\n368,457 -> 33,792\n186,81 -> 957,852\n505,283 -> 113,283\n20,878 -> 462,878\n750,237 -> 69,918\n15,280 -> 358,623\n798,981 -> 500,683\n965,970 -> 22,970\n950,970 -> 148,970\n660,392 -> 660,884\n862,405 -> 862,527\n801,283 -> 801,361\n71,837 -> 136,837\n651,438 -> 945,144\n524,607 -> 614,517\n348,955 -> 138,955\n957,164 -> 404,717\n531,581 -> 454,504\n710,185 -> 710,271\n822,86 -> 822,966\n745,233 -> 490,488\n350,823 -> 663,823\n824,67 -> 447,444\n846,667 -> 796,617\n666,24 -> 666,906\n640,39 -> 640,145\n654,481 -> 985,481\n581,894 -> 416,729\n443,11 -> 697,11\n318,627 -> 799,146\n113,78 -> 891,856\n181,149 -> 179,151\n451,74 -> 451,262\n458,726 -> 314,726\n218,662 -> 533,662\n965,108 -> 527,108\n782,481 -> 896,367\n557,927 -> 557,938\n506,242 -> 941,677\n948,778 -> 948,629\n567,816 -> 567,956\n323,773 -> 323,364\n864,980 -> 864,12\n611,699 -> 611,886\n613,392 -> 901,104\n528,905 -> 156,905\n632,206 -> 798,40\n338,237 -> 919,818\n256,889 -> 11,644\n835,52 -> 55,832\n464,144 -> 322,144\n254,747 -> 254,509\n866,892 -> 866,916\n827,946 -> 30,149\n899,84 -> 177,806\n134,634 -> 357,634\n781,492 -> 244,492\n817,762 -> 817,976\n818,749 -> 818,860\n262,480 -> 263,480\n409,576 -> 409,698\n242,151 -> 981,890\n149,519 -> 149,557\n42,990 -> 42,930\n687,974 -> 50,337\n758,382 -> 465,382\n760,861 -> 760,934\n17,835 -> 17,915\n645,923 -> 645,648\n702,116 -> 72,746\n153,162 -> 955,964\n185,101 -> 918,834\n554,179 -> 554,353\n879,673 -> 879,949\n368,13 -> 368,512\n582,105 -> 591,114\n146,291 -> 600,745\n609,538 -> 930,538\n320,604 -> 320,146\n566,698 -> 443,575\n167,708 -> 844,31\n712,630 -> 712,421\n912,930 -> 64,82\n980,931 -> 87,38\n23,893 -> 888,28\n640,435 -> 676,435\n701,516 -> 190,516\n684,145 -> 62,767\n127,471 -> 91,435\n685,197 -> 78,197\n103,493 -> 103,522\n309,986 -> 309,850\n938,270 -> 938,300\n295,72 -> 354,72\n948,889 -> 948,455\n254,733 -> 254,175\n95,329 -> 942,329\n19,672 -> 19,445\n206,807 -> 206,934\n886,961 -> 886,690\n117,386 -> 117,292\n199,59 -> 668,528\n299,263 -> 299,878\n28,295 -> 638,905\n10,140 -> 276,406\n279,526 -> 921,526\n485,128 -> 856,499\n418,398 -> 186,398\n296,577 -> 296,521\n514,261 -> 10,765\n691,673 -> 776,758\n131,430 -> 152,430\n858,85 -> 62,85\n394,846 -> 270,970\n827,913 -> 827,376\n634,669 -> 910,669\n12,53 -> 945,986\n782,467 -> 782,421\n159,832 -> 109,832\n793,807 -> 79,93\n120,584 -> 356,584\n645,16 -> 645,355\n526,685 -> 217,376\n296,305 -> 296,929\n954,144 -> 954,839\n748,88 -> 103,733\n523,804 -> 473,754\n524,316 -> 524,756\n696,183 -> 912,183\n288,564 -> 55,797\n568,103 -> 568,348\n468,626 -> 682,412\n163,163 -> 961,961\n762,824 -> 27,89\n623,625 -> 32,34\n865,343 -> 490,718\n259,458 -> 259,33\n944,660 -> 944,176\n781,804 -> 826,759\n15,702 -> 15,553\n403,310 -> 918,825\n438,734 -> 835,734\n825,13 -> 825,245\n129,611 -> 370,611\n49,939 -> 172,939\n687,906 -> 687,532\n629,482 -> 273,126\n727,218 -> 424,218\n447,451 -> 233,451\n142,779 -> 81" <> ...
```

```elixir
# remove whitespace
segments =
  Regex.replace(~r/ |\r/, input, "")
  |> String.split("\n", trim: true)
  |> Enum.map(fn segment -> String.split(segment, "->") end)
  |> Enum.map(fn segment ->
    Enum.map(
      segment,
      fn coordinate ->
        [x, y] = String.split(coordinate, ",")
        x = String.to_integer(x)
        y = String.to_integer(y)
        {x, y}
      end
    )
  end)
```

<!-- livebook:{"output":true} -->

```
[
  [{284, 294}, {733, 743}],
  [{625, 347}, {653, 375}],
  [{561, 848}, {561, 181}],
  [{836, 102}, {836, 339}],
  [{946, 941}, {22, 17}],
  [{18, 954}, {956, 16}],
  [{370, 142}, {370, 700}],
  [{990, 966}, {677, 966}],
  [{366, 603}, {366, 465}],
  [{728, 942}, {57, 271}],
  [{615, 493}, {847, 493}],
  [{584, 281}, {301, 281}],
  [{125, 356}, {301, 180}],
  [{941, 569}, {555, 183}],
  [{151, 116}, {509, 116}],
  [{41, 18}, {841, 818}],
  [{627, 670}, {627, 630}],
  [{965, 472}, {965, 100}],
  [{93, 404}, {330, 641}],
  [{475, 963}, {475, 514}],
  [{389, 389}, {389, 326}],
  [{842, 565}, {842, 576}],
  [{454, 700}, {650, 700}],
  [{73, 810}, {73, 319}],
  [{450, 212}, {450, 284}],
  [{316, 392}, {316, 697}],
  [{915, 592}, {578, 592}],
  [{622, 485}, {434, 485}],
  [{109, 853}, {952, 10}],
  [{305, 73}, {305, 222}],
  [{27, 489}, {157, 489}],
  [{191, 979}, {867, 979}],
  [{527, 329}, {527, 292}],
  [{301, 645}, {301, 162}],
  [{639, 730}, {176, 730}],
  [{46, 964}, {46, 458}],
  [{727, 422}, {435, 714}],
  [{28, 552}, {404, 552}],
  [{33, 108}, {33, 21}],
  [{227, 249}, {327, 249}],
  [{414, 903}, {784, 903}],
  [{69, 422}, {888, 422}],
  [{422, 924}, {103, 605}],
  [{793, 353}, {450, 10}],
  [{714, 682}, {714, 972}],
  [{201, 745}, {410, 745}],
  [{408, 713}, {408, ...}],
  [{174, ...}, {...}],
  [{...}, ...],
  [...],
  ...
]
```

```elixir
defmodule HydrothermalVenture do
  def is_horizontal_vertical_line?({x1, y1}, {x2, y2}) do
    x1 == x2 or y1 == y2
  end

  def get_vertical_horizontal_line({x1, y1}, {x2, y2}) do
    for i <- x1..x2, j <- y1..y2, do: {i, j}
  end

  def segments_to_points(segments) do
    segments_to_points(segments, [])
  end

  def segments_to_points(segments, acc) do
    case segments do
      [[coordinate1, coordinate2] | t] ->
        cond do
          is_horizontal_vertical_line?(coordinate1, coordinate2) ->
            segments_to_points(t, acc ++ get_vertical_horizontal_line(coordinate1, coordinate2))

          true ->
            segments_to_points(t, acc)
        end

      [] ->
        acc

      _ ->
        :error
    end
  end

  def overlap(segments) do
    segments_to_points(segments)
    |> Enum.frequencies()
    |> Enum.to_list()
    |> Enum.filter(fn {{_, _}, v} -> v > 1 end)
    |> Enum.count()
  end
end

HydrothermalVenture.overlap(segments)
```

<!-- livebook:{"output":true} -->

```
6572
```

## Hydrothermal Venture (Puzzle 2/2)

Unfortunately, considering only horizontal and vertical lines doesn't give you the full picture; **you need to also consider diagonal lines**.

Because of the limits of the hydrothermal vent mapping system, the lines in your list will only ever be horizontal, vertical, or a diagonal line at exactly 45 degrees. In other words:

* An entry like `1,1 -> 3,3` covers points `1,1 - 2,2 - 3,3`.
* An entry like `9,7 -> 7,9` covers points `9,7 - 8,8 - 7,9`.

```elixir
defmodule HydrothermalVentureDiagonal do
  require HydrothermalVenture

  def calculate_slope({x1, y1}, {x2, y2}) do
    (y2 - y1) / (x2 - x1)
  end

  def is_diagonal_line?(coordinate1, coordinate2) do
    slope = calculate_slope(coordinate1, coordinate2)
    slope == 1 or slope == -1
  end

  def get_diagonal_line({x1, y1}, {x2, y2}) do
    slope = calculate_slope({x1, y1}, {x2, y2})
    for i <- x1..x2, do: {i, trunc(slope * (i - x1) + y1)}
  end

  def segments_to_points_include_diag(segments) do
    segments_to_points_include_diag(segments, [])
  end

  def segments_to_points_include_diag(segments, acc) do
    case segments do
      [[coordinate1, coordinate2] | t] ->
        cond do
          HydrothermalVenture.is_horizontal_vertical_line?(coordinate1, coordinate2) ->
            segments_to_points_include_diag(
              t,
              acc ++ HydrothermalVenture.get_vertical_horizontal_line(coordinate1, coordinate2)
            )

          is_diagonal_line?(coordinate1, coordinate2) ->
            segments_to_points_include_diag(t, acc ++ get_diagonal_line(coordinate1, coordinate2))

          true ->
            segments_to_points_include_diag(t, acc)
        end

      [] ->
        acc

      _ ->
        :error
    end
  end

  def overlap(segments) do
    segments_to_points_include_diag(segments)
    |> Enum.frequencies()
    |> Enum.to_list()
    |> Enum.filter(fn {{_, _}, v} -> v > 1 end)
    |> Enum.count()
  end
end

HydrothermalVentureDiagonal.overlap(segments)
```

<!-- livebook:{"output":true} -->

```
21466
```

| Previous                     | Next                         |
| ---------------------------- | ---------------------------: |
| [Day 4](../Day4/Day4.livemd) | [Day 6](../Day6/Day6.livemd) |

[Return to puzzles index](../../AdventOfCode.livemd)
