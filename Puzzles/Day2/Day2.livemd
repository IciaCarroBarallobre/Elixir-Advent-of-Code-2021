<!-- livebook:{"persist_outputs":true} -->

# Advent Of Code 21

## Day 2

In one day, you can get 2 stars by  solving 2 puzzle.

Index

* [Puzzle 1](#dive-(puzzle-1/2))
* [Puzzle 2](#dive-(puzzle-2/2))

<!-- livebook:{"break_markdown":true} -->

Insert you puzzle path:

```elixir
input_puzzle_path = "./Projects/Elixir-Advent-of-Code/Puzzles/Day2/input.txt"
```

## Dive (Puzzle 1/2)

Now, you need to figure out how to pilot this thing.

```
                                          Less Depth
                                              |
                       |_                     |
                 _____|~ |____                |
      (╭ರ_•́)  (  --         ~~~~--_,              
                ~~~~~~~~~~~~~~~~~~~'`         |
-Horizontal -------------------------------------------  Horizontal
                                              |
                                            Depth
```

It seems like the submarine can take a series of commands:

* **forward X** increases the horizontal position by X units.
* **down X** increases the depth by X units.
* **up X** decreases the depth by X units.

Note that since you're on a submarine, down and up affect your depth, and so they have the opposite result of what you might expect.

The submarine seems to already have a planned course (your puzzle input). You should probably figure out where it's going.

For example:

```
forward 5
down 5
forward 8
up 3
down 8
forward 2
```

Your **horizontal position and depth both start at 0**.

The steps above would then modify them as follows:

* `forward 5` adds 5 to your **horizontal position**.
* `down 5` adds 5 to your **depth**.
* `forward 8` adds 8 to your horizontal position, `5+8=13`.
* `up 3` decreases your depth by 3, `5-3=2`.
* `down 8` adds 8 to your depth, `2+8=10`.
* `forward 2` adds 2 to your horizontal position, `13+2=15`.

After following these instructions, you would have a `horizontal position = 15` and a `depth = 10` => Multiplying these together produces 150.

Calculate the horizontal position and depth you would have after following the planned course. **What do you get if you multiply your final horizontal position by your final depth?**

```elixir
# Read the file, in this case as list o list (instruction, value)
measuremnts =
  File.read!(input_puzzle_path)
  |> String.split("\n", trim: true)
  |> Enum.map(fn str ->
    String.split(str, " ")
  end)
```

<!-- livebook:{"output":true} -->

```
[
  ["forward", "6"],
  ["forward", "6"],
  ["down", "6"],
  ["down", "5"],
  ["up", "2"],
  ["forward", "4"],
  ["forward", "8"],
  ["up", "9"],
  ["forward", "3"],
  ["down", "1"],
  ["forward", "2"],
  ["forward", "3"],
  ["down", "1"],
  ["down", "3"],
  ["down", "3"],
  ["forward", "9"],
  ["down", "6"],
  ["forward", "1"],
  ["up", "5"],
  ["down", "1"],
  ["forward", "8"],
  ["forward", "7"],
  ["up", "8"],
  ["forward", "7"],
  ["down", "9"],
  ["forward", "5"],
  ["forward", "4"],
  ["forward", "2"],
  ["down", "3"],
  ["down", "6"],
  ["down", "6"],
  ["down", "5"],
  ["forward", "5"],
  ["forward", "4"],
  ["forward", "8"],
  ["up", "3"],
  ["forward", "6"],
  ["down", "4"],
  ["up", "2"],
  ["forward", "8"],
  ["forward", "6"],
  ["forward", "1"],
  ["up", "2"],
  ["down", "9"],
  ["down", "9"],
  ["up", "5"],
  ["down", "1"],
  ["up", "1"],
  ["up", ...],
  [...],
  ...
]
```

```elixir
defmodule SubmarineInstrucctions do
  def execute(instrucctions) do
    execute(instrucctions, 0, 0)
  end

  def execute([[instruction, str_value] | tail], acc_horizontal, acc_depth) do
    value = String.to_integer(str_value)

    case instruction do
      "forward" -> execute(tail, acc_horizontal + value, acc_depth)
      "up" -> execute(tail, acc_horizontal, acc_depth - value)
      "down" -> execute(tail, acc_horizontal, acc_depth + value)
    end
  end

  def execute(_, acc_horizontal, acc_depth) do
    %{horizontal: acc_horizontal, depth: acc_depth}
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, SubmarineInstrucctions, <<70, 79, 82, 49, 0, 0, 9, ...>>, {:execute, 3}}
```

```elixir
position = SubmarineInstrucctions.execute(measuremnts)
```

<!-- livebook:{"output":true} -->

```
%{depth: 913, horizontal: 1988}
```

```elixir
position[:horizontal] * position[:depth]
```

<!-- livebook:{"output":true} -->

```
1815044
```

## Dive (Puzzle 2/2)

Based on your calculations, **the planned course doesn't seem to make any sense**. You find the submarine manual and discover that the process is actually slightly more complicated.

In addition to horizontal position and depth, **you'll also need to track a third value, aim, which also starts at 0**. The commands also mean something entirely different than you first thought:

* `down X` increases your aim by X units.
* `up X` decreases your aim by X units.
* `forward X` does two things:
  * It increases your horizontal position by X units.
  * **It increases your depth by your aim multiplied by X**.

```
                                          Less Depth
                                              |
                       |_                     |
                 _____|~ |____                |
      (╭ರ_•́)  (  --         ~~~~--_,             
                ~~~~~~~~~~~~~~~~~~~'`         |
-Horizontal ------------------------\------------------  Horizontal
                                     \        |
                                      \       |
                                      Aim    Depth
   
```

Again note that since you're on a submarine, down and up do the opposite of what you might expect: "down" means aiming in the positive direction.

Now, the above example does something different:

* `forward 5` 
  * Adds 5 to your horizontal position
  * Because `aim=0`, your depth does not change.
* `down 5` adds 5 to your aim, `aim = 5` and `depth=5`.
* `forward 8` 
  * Adds 8 to your horizontal position `5+8=13`.
  * Because your aim is 5, your depth is by `8*5=40`.
* `up 3` decreases your aim by 3, `5-3=2`.
* `down 8` adds 8 to your aim, resulting in a value of 10.
* `forward 2`
  * Adds 2 to your horizontal position, `13+2=15`.
  * Because your aim is 10, your depth increases by 2*10=20 to a total of 60.

After following these new instructions, you would have a horizontal position of 15 and a depth of 60. **Multiplying these produces 900.**

Using this new interpretation of the commands, calculate the horizontal position and depth you would have after following the planned course. **What do you get if you multiply your final horizontal position by your final depth?**

```elixir
# Read the file, in this case as list o list (instruction, value)
measuremnts =
  File.read!(input_puzzle_path)
  |> String.split("\n", trim: true)
  |> Enum.map(fn str ->
    String.split(str, " ")
  end)
```

<!-- livebook:{"output":true} -->

```
[
  ["forward", "6"],
  ["forward", "6"],
  ["down", "6"],
  ["down", "5"],
  ["up", "2"],
  ["forward", "4"],
  ["forward", "8"],
  ["up", "9"],
  ["forward", "3"],
  ["down", "1"],
  ["forward", "2"],
  ["forward", "3"],
  ["down", "1"],
  ["down", "3"],
  ["down", "3"],
  ["forward", "9"],
  ["down", "6"],
  ["forward", "1"],
  ["up", "5"],
  ["down", "1"],
  ["forward", "8"],
  ["forward", "7"],
  ["up", "8"],
  ["forward", "7"],
  ["down", "9"],
  ["forward", "5"],
  ["forward", "4"],
  ["forward", "2"],
  ["down", "3"],
  ["down", "6"],
  ["down", "6"],
  ["down", "5"],
  ["forward", "5"],
  ["forward", "4"],
  ["forward", "8"],
  ["up", "3"],
  ["forward", "6"],
  ["down", "4"],
  ["up", "2"],
  ["forward", "8"],
  ["forward", "6"],
  ["forward", "1"],
  ["up", "2"],
  ["down", "9"],
  ["down", "9"],
  ["up", "5"],
  ["down", "1"],
  ["up", "1"],
  ["up", ...],
  [...],
  ...
]
```

```elixir
defmodule SubmarineInstrucctionsWithAim do
  def execute(instrucctions) do
    execute(instrucctions, 0, 0, 0)
  end

  def execute([[instruction, str_value] | tail], acc_horizontal, acc_depth, acc_aim) do
    value = String.to_integer(str_value)

    case instruction do
      "forward" ->
        execute(
          tail,
          acc_horizontal + value,
          acc_depth + acc_aim * value,
          acc_aim
        )

      "up" ->
        execute(tail, acc_horizontal, acc_depth, acc_aim - value)

      "down" ->
        execute(tail, acc_horizontal, acc_depth, acc_aim + value)
    end
  end

  def execute(_, acc_horizontal, acc_depth, _) do
    %{horizontal: acc_horizontal, depth: acc_depth}
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, SubmarineInstrucctionsWithAim, <<70, 79, 82, 49, 0, 0, 9, ...>>, {:execute, 4}}
```

```elixir
position = SubmarineInstrucctionsWithAim.execute(measuremnts)
position[:horizontal] * position[:depth]
```

<!-- livebook:{"output":true} -->

```
1739283308
```

| Previous                     | Next                         |
| ---------------------------- | ---------------------------: |
| [Day 1](../Day1/Day1.livemd) | [Day 3](../Day3/Day3.livemd) |

[Return to puzzles index](../../AdventOfCode.livemd)
