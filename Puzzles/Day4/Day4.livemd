<!-- livebook:{"persist_outputs":true} -->

# Advent Of Code 21 - Day 4

## Index & Initial vars

In one day, you can get 2 stars by  solving 2 puzzle.

Index

* [Puzzle 1](#giant-squid-(puzzle-1/2))
* [Puzzle 2](#giant-squid-(puzzle-2/2))

```elixir
input_puzzle_path = "./<Insert path>/Elixir-Advent-of-Code/Puzzles/Day4/input.txt"
```

<!-- livebook:{"output":true} -->

```
"./Projects/Elixir-Advent-of-Code/Puzzles/Day4/input.txt"
```

## Giant Squid (Puzzle 1/2)

You're already almost 1.5km (almost a mile) below the surface of the ocean, already so deep that you can't see any sunlight. What you can see, however, is a giant squid `<コ:彡`
 that has attached itself to the outside of your submarine.

**Maybe it wants to play bingo?**

```
                                                    _
       ,----                                      /  \             
      (  - - )                                   /    \  
      (  __/ )                                    |oo|
       _/_(          _.---._                      |  |  
      /    | ,-._   /  o    \                     |  |
     //|__|\/,-` |_| O  o o O|                   //||\\
    ///    \       |O o  o O |                  // || \\
      |    |        \O o   o/                  ((  ((  ))
      |____|         `'-.-\\    
      |  | |       ____)_(____  
```

<!-- livebook:{"break_markdown":true} -->

**Bingo** is played on a **set of boards** each consisting of a **5x5 grid of numbers**. **Numbers are chosen at random**, and the **chosen number is marked on all boards** on which it appears. If **all numbers in any row or any column of a board are marked, that board wins**.

<!-- livebook:{"break_markdown":true} -->

The submarine has a bingo subsystem to help passengers pass the time. It automatically generates a random order in which to draw numbers and a random set of boards (your puzzle input. For example:

```
7,4,9,5,11,17,23,2,0,14,21,24,10,16,13,6,15,25,12,22,18,20,8,19,3,26,1

22 13 17 11  0
 8  2 23  4 24
21  9 14 16  7
 6 10  3 18  5
 1 12 20 15 19

 3 15  0  2 22
 9 18 13 17  5
19  8  7 25 23
20 11 10 24  4
14 21 16 12  6

14 21 17 24  4
10 16 15  9 19
18  8 23 26 20
22 11 13  6  5
 2  0 12  3  7
```

After the first five numbers are drawn (7, 4, 9, 5, and 11), there are no winners, but the boards are marked as follows (shown here adjacent to each other to save space):

```
22 13 17 *11 0          3  15  0  2 22         14  21 17 24 *4
 8  2 23 *4 24         *9  18 13 17 *5         10  16 15 *9 19
21 *9 14 16  7         19   8 *7 25 23         18   8 23 26 20
 6 10  3 18 *5         20 *11 10 24  4         22 *11 13  6  5
 1 12 20 15 19         14  21 16 12  6          2   0 12  3 *7
```

After the next six numbers are drawn (17, 23, 2, 0, 14, and 21), there are still no winners:

```
 22 13 *17 *11  *0         3  15 *0  *2 22        *14  *21 *17 24  *4
  8 *2 *23  *4  24        *9  18 13 *17 *5         10   16 15  *9  19
*21 *9 *14  16  *7        19   8 *7  25 *23        18   8 *23  26  20
  6 10   3  18  *5        20 *11 10  24 *4         22  *11 13   6  *5
  1 12  20  15  19       *14 *21 16  12  6         *2   *0 12   3  *7
```

Finally, 24 is drawn:

```
 22 13 *17 *11  *0         3  15 *0  *2  22        *14  *21  *17 *24  *4 ====> WINS 3 board
  8 *2 *23  *4  24        *9  18 13 *17  *5         10   16  15   *9  19
*21 *9 *14  16  *7        19   8 *7  25 *23         18   8  *23   26  20
  6 10   3  18  *5        20 *11 10 *24  *4         22  *11  13    6  *5
  1 12  20  15  19       *14 *21 16  12   6         *2   *0  12    3  *7
```

<!-- livebook:{"break_markdown":true} -->

At this point, the **third board wins** because it has at least one complete row or column of marked numbers.

The **score** of the winning board can now be calculated. Start by finding the **sum of all unmarked numbers on that board**; in this case, the sum is 188. Then, **multiply that sum by the number that was just called when the board won, 24, to get the final score**, `188 * 24 = 4512.`

**To guarantee victory against the giant squid, figure out which board will win first. What will your final score be if you choose that board?**

```elixir
# Read the input file and split the bits

{:ok, file} = File.open(input_puzzle_path, [:read, :compressed])

bingo_numbers =
  IO.read(file, :line)
  |> String.replace("\n", "")
  |> String.split(",", trim: true)
  |> Enum.map(fn e -> String.to_integer(e) end)

bingo_boards =
  IO.read(file, :eof)
  |> String.split("\n", trim: true)
  |> Enum.map(fn x -> String.split(x, " ", trim: true) end)
  |> Enum.map(fn line -> Enum.map(line, fn item -> String.to_integer(item) end) end)
  |> Enum.chunk_every(5)

File.close(file)

IO.inspect(bingo_numbers, label: "Numbers bingo:")
```

<!-- livebook:{"output":true} -->

```
Numbers bingo:: [99, 56, 7, 15, 81, 26, 75, 40, 87, 59, 62, 24, 58, 34, 78, 86, 44, 65, 18, 94,
 20, 17, 98, 29, 57, 92, 14, 32, 46, 79, 85, 84, 35, 68, 55, 22, 41, 61, 90, 11,
 69, 96, 23, 47, 43, 80, 72, 50, 97, 33, ...]
```

<!-- livebook:{"output":true} -->

```
[99, 56, 7, 15, 81, 26, 75, 40, 87, 59, 62, 24, 58, 34, 78, 86, 44, 65, 18, 94, 20, 17, 98, 29, 57,
 92, 14, 32, 46, 79, 85, 84, 35, 68, 55, 22, 41, 61, 90, 11, 69, 96, 23, 47, 43, 80, 72, 50, 97, 33,
 ...]
```

```elixir
defmodule Bingo do
  def check_winner_boards(boards) do
    check_winner_boards(boards, [])
  end

  def check_winner_boards(boards, result) do
    case boards do
      [board | rest_of_boards] ->
        check_winner_boards(
          rest_of_boards,
          if check_victory(board) do
            [board | result]
          else
            result
          end
        )

      _ ->
        result
    end
  end

  def check_victory(board) do
    check_line_victory(board) or check_column_victory(board)
  end

  def check_line_victory(board) do
    Enum.any?(board, fn line -> Enum.sum(line) == -5 end)
  end

  def check_column_victory(board) do
    board
    # transpose
    |> Enum.zip()
    |> Enum.map(&Tuple.to_list(&1))
    |> Enum.any?(fn line -> Enum.sum(line) == -5 end)
  end

  def mark_number(boards, num) do
    Enum.map(
      boards,
      fn board ->
        Enum.map(board, fn line ->
          Enum.map(line, fn e ->
            if e == num do
              -1
            else
              e
            end
          end)
        end)
      end
    )
  end

  def find_victory_boards(boards, numbers) do
    find_victory_boards(boards, numbers, [], -1)
  end

  def find_victory_boards(boards, numbers, winner_boards, last_number) do
    case {numbers, winner_boards} do
      {_, [winners]} ->
        {[winners], last_number}

      {[current_number | t], []} ->
        marked_boards = mark_number(boards, current_number)

        find_victory_boards(
          marked_boards,
          t,
          check_winner_boards(marked_boards),
          current_number
        )

      _ ->
        raise "Case not expected"
    end
  end

  def result(board, last_n) do
    aux_board =
      Enum.map(board, fn line ->
        Enum.map(line, fn
          -1 -> 0
          x -> x
        end)
      end)

    Enum.sum(Enum.map(aux_board, fn line -> Enum.sum(line) end)) * last_n
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Bingo, <<70, 79, 82, 49, 0, 0, 20, ...>>, {:result, 2}}
```

```elixir
{winner_boards, last_number} =
  Bingo.find_victory_boards(bingo_boards, bingo_numbers)
  |> IO.inspect(label: "Board and last number")

# Choose the first one
Enum.at(winner_boards, 0)
|> Bingo.result(last_number)
```

<!-- livebook:{"output":true} -->

```
Board and last number: {[
   [
     [60, -1, 37, -1, 73],
     [80, -1, -1, 30, 64],
     [77, -1, -1, 1, 45],
     [79, -1, 11, 12, 51],
     [25, -1, 68, 67, 61]
   ]
 ], 14}
```

<!-- livebook:{"output":true} -->

```
11774
```

## Giant Squid (Puzzle 2/2)

On the other hand, it might be wise to try a different strategy: **let the giant squid win**.

The safe thing to do is to figure out **which board will win last and choose that one**. That way, no matter which boards it picks, it will win for sure.

In the above example, the second board is the last to win, which happens after 13 is eventually called and its middle column is completely marked. If you were to keep playing until this point, the second board would have a sum of unmarked numbers equal to 148 for a final score of 148 * 13 = 1924.

Figure out which board will win last. **Once it wins, what would its final score be?**

```elixir
defmodule BingoLast do
  require Bingo

  # TO-DO
end
```

<!-- livebook:{"output":true} -->

```
{:module, BingoLast, <<70, 79, 82, 49, 0, 0, 4, ...>>, Bingo}
```

| Previous                     | Next                         |
| ---------------------------- | ---------------------------: |
| [Day 3](../Day3/Day3.livemd) | [Day 5](../Day5/Day5.livemd) |

[Return to puzzles index](../../AdventOfCode.livemd)
