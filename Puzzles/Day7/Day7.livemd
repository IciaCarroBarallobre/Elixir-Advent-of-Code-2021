<!-- livebook:{"persist_outputs":true} -->

# Advent Of Code 21 - Day7

## Index & Initial vars

In one day, you can get 2 stars by  solving 2 puzzle.

Index

* [Puzzle 1](#the-treachery-of-whales-(puzzle-1/2))
* [Puzzle 2](#the-treachery-of-whales-(puzzle-2/2))

```elixir
input_puzzle_path = "./Projects/Elixir-Advent-of-Code/Puzzles/Day7/input.txt"
```

<!-- livebook:{"output":true} -->

```
"./Projects/Elixir-Advent-of-Code/Puzzles/Day7/input.txt"
```

## The Treachery of Whales (Puzzle 1/2)

A giant whale has decided your submarine is its next meal, and it's much faster than you are. There's nowhere to run! Suddenly, a swarm of crabs (in its own tiny submarine) zooms in to rescue you! They seem to be preparing to blast a hole in the ocean floor; **sensors indicate a massive underground cave** system just beyond where they're aiming!

```
-----------------------------------------------------------------------------------


            _,.-------._
   /\__/\  /            \
   \_  _/ /              \
     \ \_|           @ __|                               |_   
      \                \_                           _____|~ |____    
       \     ,__/       /                         (  --         ~~~~--_,
        ---------------                             ~~~~~~~~~~~~~~~~~~~'` 



                                                      ðŸ¦€     ðŸ¦€
                                                ---------     ---------
                                                         |    |   
                                                        /      \
                                             __________/        \___________

```

The crab submarines all need to be aligned before they'll have enough power to blast a large enough hole for your submarine to get through. However, it doesn't look like they'll be aligned before the whale catches you! Maybe you can help?

<!-- livebook:{"break_markdown":true} -->

Crab submarines can only move horizontally. You quickly make a list of the horizontal position of each crab (your puzzle input).

Crab submarines have limited fuel, so you need to find a way to make all of their horizontal positions match while requiring them to spend as little fuel as possible.

For example, consider the following horizontal positions:

`16,1,2,0,4,2,7,1,2,14`

This means there's a crab with horizontal position 16, a crab with horizontal position 1, and so on.

Each change of 1 step in horizontal position of a single crab costs 1 fuel. The least fuel is horizontal position 2:

* Move from 16 to 2: 14 fuel
* Move from 1 to 2: 1 fuel
* Move from 2 to 2: 0 fuel
* Move from 0 to 2: 2 fuel
* Move from 4 to 2: 2 fuel
* Move from 2 to 2: 0 fuel
* Move from 7 to 2: 5 fuel
* Move from 1 to 2: 1 fuel
* Move from 2 to 2: 0 fuel
* Move from 14 to 2: 12 fuel

This costs a total of 37 fuel. This is the cheapest possible outcome; more expensive outcomes include aligning at position 1 (41 fuel), position 3 (39 fuel), or position 10 (71 fuel).

Determine the horizontal position that the crabs can align to using the least fuel possible. How much fuel must they spend to align to that position?

```elixir
{:ok, file} = File.open(input_puzzle_path, [:read, :compressed])

input =
  file
  |> IO.read(:eof)
  |> String.replace(~r/\n/, "")
  |> String.split(",")
  |> Enum.map(&String.to_integer(&1))
  |> IO.inspect(label: "Real input")
```

<!-- livebook:{"output":true} -->

```
Real input: [1101, 1, 29, 67, 1102, 0, 1, 65, 1008, 65, 35, 66, 1005, 66, 28, 1, 67, 65, 20,
 4, 0, 1001, 65, 1, 65, 1106, 0, 8, 99, 35, 67, 101, 99, 105, 32, 110, 39, 101,
 115, 116, 32, 112, 97, 115, 32, 117, 110, 101, 32, 105, ...]
```

<!-- livebook:{"output":true} -->

```
[1101, 1, 29, 67, 1102, 0, 1, 65, 1008, 65, 35, 66, 1005, 66, 28, 1, 67, 65, 20, 4, 0, 1001, 65, 1,
 65, 1106, 0, 8, 99, 35, 67, 101, 99, 105, 32, 110, 39, 101, 115, 116, 32, 112, 97, 115, 32, 117,
 110, 101, 32, 105, ...]
```

The cost of fuel to go to the pos mean from pos y:

* Current source position: $pos_{x}$

* Destiny Position: $pos_{y}$

* Frequency of crabs in $pos_{x}$:  $frequency_{y}$

* Cost function to carry all crabs from its current position to the destiny position:

  $cost = 
   \sum_{y \in crab positions} |(pos_{y} - pos_{mean})| * frequency_{y}
  $

```elixir
defmodule LessFuelConsumption do
  def mean_point(frequencies) do
    # TO-DO
  end

  def absolute_value(number) do
    if number >= 0, do: number, else: number * -1
  end

  def calculate(input) do
    frequencies = Enum.frequencies(input)

    mean =
      frequencies
      |> mean_point()
      |> IO.inspect()

    frequencies
    |> Enum.reduce(0, fn {pos, frequency}, acc -> acc + absolute_value(pos - mean) * frequency end)
  end
end
```

<!-- livebook:{"output":true} -->

```
warning: variable "frequencies" is unused (if the variable is not meant to be used, prefix it with an underscore)
  Projects/Elixir-Advent-of-Code/Puzzles/Day7/Day7.livemd#cell:2: LessFuelConsumption.mean_point/1

```

<!-- livebook:{"output":true} -->

```
{:module, LessFuelConsumption, <<70, 79, 82, 49, 0, 0, 10, ...>>, {:calculate, 1}}
```

```elixir
test = [16, 1, 2, 0, 4, 2, 7, 1, 2, 14]
LessFuelConsumption.calculate(test)
```

<!-- livebook:{"output":true} -->

```
nil
```

## The Treachery of Whales (Puzzle 2/2)

| Previous                     | Next |
| ---------------------------- | ---: |
| [Day 6](../Day6/Day6.livemd) | --   |

[Return to puzzles index](../../AdventOfCode.livemd)
